<html>
<head>
<link rel="stylesheet" href="<%- theme %>/style.css">
<script type="text/javascript" src="/static/jquery.2.1.3.min.js"></script>
<script type="text/javascript" src="/static/photobooth.0.7_min.js"></script>
<script type="text/javascript" src="/static/socket.io.2.0.4.slim.js"></script>
<script type="text/javascript" src="/static/print.min.js"></script>
<script type="text/javascript">

var socket = io()

/* State Machine (implemented as page object and states below):

Welcome - no credits
Welcome - credits

Booth - credits - not started
Booth - credits - taking photo 1
Booth - credits - taking photo 2
Booth - credits - taking photo 3

Review - waiting for OK to print
Review - printing

*/

// pages

var welcome
var booth
var review

// currently-focused page

var page

var photo // number of photo
var photos // photos object

var timer


socket.on('credit update', function(credits) {
  apply_credits(credits)
})

socket.on('button pressed', function(button) {
  page.trigger("booth:button:" + button) // bubble message to current page
})

socket.on('pdf', function (data, checksum) {
  console.log("received pdf data and checksum " + checksum)
  page.trigger("booth:pdf", [data, checksum])
})

var credits = 0

function apply_credits(c) {
  credits = c
  var txt = credits.toString() + " credit"
  if (credits != 1) {
    txt += "s"
  }
  $('.credits').text(txt)

  if (credits == 0) {
    setTimeout(function() {
      $('.credits').css("background-color", NO_CREDITSCOLOR)
    }, 500)
  } else {
    $('.credits').css("background-color", CREDITSCOLOR)
    page.trigger("booth:credits") // trigger currently-focused page
  }
}

function start_camera() {
  $('#camera').photobooth();
  $('#camera').on("image", function(event, dataUrl) {
    photos.trigger("booth:photos:display", [dataUrl]) // show photo on screen
    socket.emit('photo taken', dataUrl) // to server

    photo++

    if (photo > 2) { // last photo!
      socket.emit("credit used")
      page.trigger("booth:review")
    } else {
      booth.data("state", "ready")
    }
  })
}

var NO_CREDITSCOLOR;
var CREDITSCOLOR;

$(document).ready(function() {

  // populate the page objects for later use

  welcome = $('#pages #welcome')
  booth = $('#pages #booth')
  review = $('#pages #review')

  // initial page state

  $('html, body').animate({
        scrollLeft: welcome.offset().left
  }, 10)

  $.get("/credits", function(msg) {
    apply_credits(msg) // in case credits were entered before we started
  })

  photo = 0

  booth.data("state", "ready")
  review.data("state", "ready")

  // discover colors from CSS

  NO_CREDITSCOLOR = $("#NO_CREDITSCOLOR").css("color"); // check these are the right way around in the style
  CREDITSCOLOR = $("#CREDITSCOLOR").css("color");


  //
  // welcome page handlers
  //

  // input

  welcome.on("booth:button:ok", function(event) {
    if (welcome.data("state") != "flashing") {
      welcome.data("state", "flashing") 
      if (credits == 0) {
        $('.credits')
          .fadeOut(50).fadeIn(50)
          .fadeOut(50).fadeIn(50)
          .fadeOut(50).fadeIn(50)
          .fadeOut(50).fadeIn(50)
          .fadeOut(50).fadeIn(50)
      }
      setTimeout(function() {
        welcome.data("state", "not flashing")
      }, 600)
    }
  })


  // transition out

  welcome.on("booth:credits", function(event) {
    if (credits > 0) {
      start_camera()
      $('html, body').animate({
        scrollLeft: booth.offset().left
      }, 2000)
      setTimeout(function() {
        page = booth // scroll and update the focus page
      }, 2100)
    }
  })

  //
  // booth page handlers
  //

  // photos

  photos = $('#booth #photos')

  photos.on("booth:photos:display", function(event, dataUrl) {
    $(photos.children()[photo]).html('<img src="' + dataUrl + '" />')
  })

  // timer

  timer = $('#booth .timer')

  timer.on("booth:timer:start", function(event) {
    var seconds = 3;
    timer.text(seconds)
    timer.data("seconds", seconds)
    timer.fadeIn(100)

    if (booth.data("state") == "cancelling") {
      booth.data("state", "ready") // cancelled
      return
    }

    timer.timer = setTimeout(function() {
      timer.trigger("booth:timer:tick")
    }, 1000)
  })

  timer.on("booth:timer:tick", function(event) {
    var seconds = timer.data("seconds")
    seconds--

    if (booth.data("state") == "cancelling") {
      booth.data("state", "ready") // cancelled
      return
    }

    if (seconds == 0) {
      timer.trigger("booth:timer:finished")
    } else {
      timer.text(seconds)
      timer.data("seconds", seconds)
      timer.timer = setTimeout(function() {
        timer.trigger("booth:timer:tick")
      }, 1000)
    }
  })

  timer.on("booth:timer:finished", function(event) {
    $('li.trigger').click() // clicking the trigger is all that is needed as the handler for the photo is above
    timer.fadeOut(100)
  })

  // input

  booth.on("booth:button:cancel", function(event) {

    console.log("cancel pressed with booth active")

    if (booth.data("state") == "taking_photo") {
      booth.data("state", "cancelling") // canelling goes to read after less than a second
      timer.text('X')
      timer.fadeOut(1000)
    }
  })

  booth.on("booth:button:ok", function(event) {

    console.log("okay pressed with booth active")

    if (booth.data("state") == "ready") { // locking that works because single threaded
      booth.data("state", "taking_photo");

      timer.trigger("booth:timer:start")

      $('html, body').animate({ // scroll to where the action is
        scrollLeft: booth.offset().left
      }, 15)
    }
  })

  // transition out

  booth.on("booth:review", function(event) {

    $('#review #strip').append($('#booth #photos').clone()) // copy photos out

    $('html, body').animate({
      scrollLeft: review.offset().left
    }, 2000)
    setTimeout(function() {
      page = review // scroll and update the focus page
    }, 2100)
  })


  //
  // review page handlers
  //

  // printer / review timer

  printer = $('#review .timer')

  printer.on("review:timer:start", function(event) {
    console.log("starting print timer...")
    var seconds = 30;
    printer.text(seconds + " seconds")
    printer.data("seconds", seconds)
    setTimeout(function() {
      printer.trigger("review:timer:tick")
    }, 1000)
  })

  printer.on("review:timer:tick", function(event) {
    console.log("print timer tick...")
    var seconds = printer.data("seconds")
    seconds--
    if (seconds == 0) {
      printer.trigger("review:timer:finished")
    } else {
      printer.text(seconds + " seconds")
      printer.data("seconds", seconds)
      setTimeout(function() {
        printer.trigger("review:timer:tick")
      }, 1000)
    }
  })

  printer.on("review:timer:finished", function(event) {
    console.log("print timer finished...")
    socket.emit("review:timer:finished")
    location.reload() // reload page
  })

  review.on("booth:button:ok", function(event) {
    if (review.data("state") == "ready") { // locking that works because single threaded
      review.data("state", "printing")
      socket.emit("review.print")
      $('#review #message').text("Printing photos...")
      printer.trigger("review:timer:start")
    }
  })

  review.on("booth:pdf", function (event, path, checksum) {
    // we get the pdf as a dataurl
    printJS({printable:'/pdf?filename=' + path + "&checksum=" + checksum, type:'pdf', showModal:true})
  })

  // we set this last so that button presses don't make it anywhere until after all setup is complete
  page = welcome // starting page

})

</script>
</head>
<body>
<div id="CREDITSCOLOR" class="invisible"></div><div id="NO_CREDITSCOLOR" class="invisible"></div>
<div id="pages">
<div class="page" id="welcome">
  <span class="credits">0 credits</span>
</div><!-- welcome page -->
<div class="page" id="booth">
<div id="credits">
  <span class="credits">0 credits</span>
</div>
<div class="timer">3</div>
<div id="camera"></div>
<div id="photos">
  <div class="photo"></div>
  <div class="photo"></div>
  <div class="photo"></div>
</div>
</div> <!-- end of camera page -->
<div class="page" id="review">
  <div id="strip">
  </div>
  <div id="message">Push okay to print these photos...</div>
  <div class="timer">30 seconds</div>
  <div id="pdf">
  </div>
</div><!-- review -->
</div>
</body>
</html>